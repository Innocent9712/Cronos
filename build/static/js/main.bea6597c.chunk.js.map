{"version":3,"sources":["table.js","form.js","App.js","actions/user.js","serviceWorker.js","reducers/user.js","index.js","store/configureStore.js"],"names":["connect","state","users","props","Paper","style","padding","margin","width","TableHead","TableRow","TableCell","TableBody","map","item","firstName","lastName","birthday","age","hobby","UserForm","initialFormState","useState","user","setUser","error","setError","handleInput","e","target","name","value","console","log","handleSubmit","preventDefault","onSubmit","color","Grid","TextField","label","placeholder","type","onChange","InputLabelProps","shrink","Button","variant","onClick","AppBar","position","Toolbar","container","dispatch","addUser","Boolean","window","location","hostname","match","userInitialState","action","store","createStore","combineReducers","userReducer","__REDUX_DEVTOOLS_EXTENSION__","getState","redux","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAgDeA,eANS,SAAAC,GACtB,MAAO,CACLC,MAAOD,EAAMC,SAIFF,EAnCD,SAAAG,GACZ,OACE,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,QAAS,GAAIC,OAAQ,GAAIC,MAAO,MAC9C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,mBACA,kBAACA,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,iBACA,kBAACA,EAAA,EAAD,YACA,kBAACA,EAAA,EAAD,gBAGJ,kBAACC,EAAA,EAAD,KACGT,EAAMD,MAAMW,KAAI,SAAAC,GACf,OACE,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAYG,EAAKC,WACjB,kBAACJ,EAAA,EAAD,KAAYG,EAAKE,UACjB,kBAACL,EAAA,EAAD,KAAYG,EAAKG,UACjB,kBAACN,EAAA,EAAD,KAAYG,EAAKI,KACjB,kBAACP,EAAA,EAAD,KAAYG,EAAKK,gB,8PC3B/B,IA2GeC,EA3GE,SAAAjB,GACf,IAAMkB,EAAmB,CACvBN,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,IAAK,GACLC,MAAO,IANe,EAQAG,mBAASD,GART,mBAQjBE,EARiB,KAQXC,EARW,OASEF,mBAAS,CAACG,MAAM,KATlB,mBASjBA,EATiB,KASVC,EATU,KAYlBC,EAAc,SAAAC,GAAM,IAAD,EACCA,EAAEC,OAAlBC,EADe,EACfA,KAAMC,EADS,EACTA,MACdP,E,yVAAQ,CAAD,GAAMD,EAAN,eAAaO,EAAOC,KAC3BC,QAAQC,IAAIF,IAGRG,EAAe,SAAAN,GACnBA,EAAEO,iBACEZ,EAAKR,WAAaQ,EAAKP,UAAYO,EAAKN,UAC1CO,EAAQH,GACRlB,EAAMiC,SAAS,CACbrB,UAAWQ,EAAKR,UAChBC,SAAUO,EAAKP,SACfC,SAAUM,EAAKN,SACfC,IAAKK,EAAKL,IACVC,MAAOI,EAAKJ,SAGdO,EAAS,CAACD,MAAO,oCAInB,OACE,kBAACrB,EAAA,EAAD,CAAOC,MAAO,CAAEE,OAAQ,GAAID,QAAS,GAAIE,MAAO,MAC9C,uBAAGH,MAAO,CAAEgC,MAAO,QAAUZ,EAAMA,OACrC,0BAAMW,SAAUF,GACd,kBAACI,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,aACNC,YAAY,OACZpC,MAAO,GACPqC,KAAK,OACLZ,KAAK,YACLC,MAAOR,EAAKR,UACZ4B,SAAUhB,KAGd,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,YACNC,YAAY,MACZC,KAAK,OACLZ,KAAK,WACLC,MAAOR,EAAKP,SACZ2B,SAAUhB,KAGd,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEG,KAAK,OACLF,MAAM,gBACNC,YAAY,aACZG,gBAAiB,CAAEC,QAAQ,GAC3Bf,KAAK,WACLC,MAAOR,EAAKN,SACZ0B,SAAUhB,KAGd,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,MACNE,KAAK,SACLD,YAAY,KACZX,KAAK,MACLC,MAAOR,EAAKL,IACZyB,SAAUhB,KAGd,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,QACNC,YAAY,aACZC,KAAK,OACLZ,KAAK,QACLC,MAAOR,EAAKJ,MACZwB,SAAUhB,KAGd,kBAACW,EAAA,EAAD,KACE,kBAACQ,EAAA,EAAD,CACEJ,KAAK,SACLL,MAAM,UACNU,QAAQ,YACRC,QAASd,GAJX,Y,wBCjEGlC,iBArBH,SAACG,GAEX,OACE,kBAAC,WAAD,KACE,kBAAC8C,EAAA,EAAD,CAAQZ,MAAM,YAAYa,SAAS,UACjC,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAYJ,QAAQ,QAAQV,MAAM,WAAlC,kBAKJ,kBAACC,EAAA,EAAD,CAAMc,WAAS,GACb,kBAAC,EAAD,CAAUhB,SAAU,SAAAb,GAClBpB,EAAMkD,SCzBO,wEAMnB,GANmB,IACrBtC,iBADqB,MACT,GADS,MAErBC,gBAFqB,MAEV,GAFU,MAGrBC,gBAHqB,MAGV,GAHU,MAIrBC,WAJqB,MAIf,KAJe,MAKrBC,aALqB,MAKb,GALa,QAMX,CACVuB,KAAM,WACNxC,MAAO,CACLa,YACAC,WACAC,WACAC,MACAC,UDYqBmC,CAAQ/B,OAEzB,kBAAC,EAAD,WEfYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBClBAC,EAAmB,GACV,aAAuC,IAAtC3D,EAAqC,uDAA7B2D,EAAkBC,EAAW,uCACnD,OAAQA,EAAOnB,MACb,IAAK,WACH,MAAM,GAAN,mBAAWzC,GAAX,CAAkB4D,EAAO3D,QAC3B,QACE,OAAOD,ICEP6D,ECJUC,YACZC,YAAgB,CACd9D,MAAO+D,IAETT,OAAOU,8BAAgCV,OAAOU,gCDElDlC,QAAQC,IAAI6B,EAAMK,YAClB,IAAMC,EACF,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAIRO,IAASC,OAAOF,EAAOG,SAASC,eAAe,SFgHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bea6597c.chunk.js","sourcesContent":["// Table\n\nimport React from \"react\";\nimport {\n  Paper,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell\n} from \"@material-ui/core\";\nimport { connect } from 'react-redux';\n\n\nconst Table = props => {\n  return (\n    <Paper style={{ padding: 30, margin: 30, width: 500 }}>\n      <TableHead>\n        <TableRow>\n          <TableCell>First Nane</TableCell>\n          <TableCell>Last Name</TableCell>\n          <TableCell>Birthday</TableCell>\n          <TableCell>Age</TableCell>\n          <TableCell>Hobby</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {props.users.map(item => {\n          return (\n            <TableRow>\n              <TableCell>{item.firstName}</TableCell>\n              <TableCell>{item.lastName}</TableCell>\n              <TableCell>{item.birthday}</TableCell>\n              <TableCell>{item.age}</TableCell>\n              <TableCell>{item.hobby}</TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Paper>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users\n  };\n};\n\nexport default connect(mapStateToProps)(Table);\n","// Form\n\nimport React, { useState } from \"react\";\nimport { Grid, TextField, Paper, Button } from \"@material-ui/core\";\n\n\nconst UserForm = props => {\n  const initialFormState = {\n    firstName: \"\",\n    lastName: \"\",\n    birthday: \"\",\n    age: \"\",\n    hobby: \"\"\n  };\n  const [user, setUser] = useState(initialFormState);\n  const [error, setError ]= useState({error:''})\n\n\n  const handleInput = e => {\n    const { name, value } = e.target;\n    setUser({ ...user, [name]: value });\n    console.log(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (user.firstName && user.lastName && user.birthday) {\n      setUser(initialFormState);\n      props.onSubmit({\n        firstName: user.firstName,\n        lastName: user.lastName,\n        birthday: user.birthday,\n        age: user.age,\n        hobby: user.hobby\n      })\n    } else {\n      setError({error: 'Please Fill all required input'})\n    }\n  };\n\n    return (\n      <Paper style={{ margin: 30, padding: 30, width: 500 }}>\n        <p style={{ color: 'red' }}>{error.error}</p>\n      <form onSubmit={handleSubmit}>\n        <Grid>\n          <Grid>\n            <TextField\n              label=\"First Name\"\n              placeholder=\"John\"\n              style={{}}\n              type=\"text\"\n              name=\"firstName\"\n              value={user.firstName}\n              onChange={handleInput}\n            ></TextField>\n          </Grid>\n          <Grid>\n            <TextField\n              label=\"Last Name\"\n              placeholder=\"Doe\"\n              type=\"text\"\n              name=\"lastName\"\n              value={user.lastName}\n              onChange={handleInput}\n            ></TextField>\n          </Grid>\n          <Grid>\n            <TextField\n              type=\"date\"\n              label=\"Date Of Birth\"\n              placeholder=\"mm/dd/yyyy\"\n              InputLabelProps={{ shrink: true }}\n              name=\"birthday\"\n              value={user.birthday}\n              onChange={handleInput}\n            ></TextField>\n          </Grid>\n          <Grid>\n            <TextField\n              label=\"Age\"\n              type=\"number\"\n              placeholder=\"20\"\n              name=\"age\"\n              value={user.age}\n              onChange={handleInput}\n            ></TextField>\n          </Grid>\n          <Grid>\n            <TextField\n              label=\"Hobby\"\n              placeholder=\"e.g Movies\"\n              type=\"text\"\n              name=\"hobby\"\n              value={user.hobby}\n              onChange={handleInput}\n            ></TextField>\n          </Grid>\n          <Grid>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={handleSubmit}\n            >\n              Add\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Paper>\n  );\n};\n\nexport default UserForm;\n","//  Parent component\n\nimport React, { Fragment} from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport Table from \"./table\";\nimport UserForm from \"./form\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TypoGraphy from \"@material-ui/core/Typography\";\nimport { connect } from 'react-redux';\nimport { addUser } from './actions/user';\n\nconst App = (props) => {\n\n  return (\n    <Fragment>\n      <AppBar color=\"secondary\" position=\"static\">\n        <Toolbar>\n          <TypoGraphy variant=\"title\" color=\"inherit\">\n            User Profile\n          </TypoGraphy>\n        </Toolbar>\n      </AppBar>\n      <Grid container>\n        <UserForm onSubmit={user => {\n          props.dispatch(addUser(user))\n        }} />\n        <Table />\n      </Grid>\n      </Fragment>\n  );\n};\n\nexport default connect()(App);\n","export const addUser = ({\n  firstName = \"\",\n  lastName = \"\",\n  birthday = \"\",\n  age = null,\n  hobby = \"\"\n} = {}) => ({\n  type: \"ADD_USER\",\n  users: {\n    firstName,\n    lastName,\n    birthday,\n    age,\n    hobby\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const userInitialState = [];\nexport default (state = userInitialState, action) => {\n  switch (action.type) {\n    case \"ADD_USER\":\n      return [...state, action.users];\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nconsole.log(store.getState());\nconst redux = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(redux, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers } from \"redux\";\nimport userReducer from \"../reducers/user\";\n\nexport default () => {\n  const store = createStore(\n    combineReducers({\n      users: userReducer\n    }),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  return store;\n};\n"],"sourceRoot":""}